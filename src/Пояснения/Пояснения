я сделала скрины твоих комментов на 1 ревью, но когда пушила исправления, зачистила историю.
Решила, что будет не лишним продублировать замечания


1. README.md

    Можно улучшить: хорошей практикой является добавление README.md с описанием проекта, которое включает название, технологии в проекте (например, Java 11, JUnit 4.13.2, maven 3.9.0 и т.д.), настройка (если необходима) и как запускать ( mvn clean test - кавычки позволяют выполнять запуск из файла README.md). Как оформлять README.md можно ознакомиться
    в статье https://bloq.jetbrains.com/idea/2022/08/markdown-support-improvements/
    .idea/encodings.xmI

2. .idea

    Необходимо исправить: в ПР-е не должно быть лишних файлов (.DS_Store, .idea, .build, .target за исключением файлов отчета). Это локальные файлы. Загружать локальные файлы на удаленный репозиторий не принято: это считается плохой практикой. Они не несут полезной информации, но занимают место.

3. src/main/java/org/example/MainPage.java

    //найти и кликнуть на вопрос, получить ответ
    public String findQuestionAndGetAnswer (String questionText) {

Можно улучшить: Не следует писать сложные методы. Такой код трудно читаем. Лучше написать несколько простых методов и затем переиспользовать их.

4. src/main/java/org/example/OrderPage.java

   //нажимаем на кнопку подтверждения заказа
   driver.findElement (orderConfirmButton).click();
   WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(3)) ;
   try {

   Необходимо исправить: Блок try конструкции try-catch предназначен для обработки возможных исключений, а не для обработки исключений выбрасываемых при ожидании веб-элементов. Если assertion размещен внутри блока try, то выбрасываемое им исключение обрабатывается и кейс не фейлится, что делает его бесполезным.
   Это может создавать путаницу и затруднять чтение и понимание кода.
   Использование блок try с дальнейшим выбросом эксепшена - называется антипатерном "Reinventing the wheel"
   (Изобретение колеса). Суть его заключается в том, что разработчик реализует собственное решение для задачи, для которой уже существуют решения, причём в разы лучше, чем придуманное программистом.
   В даном случае следует использовать org.junit.Assert, а не конструкцию try-catch

 5. src/test/java/CheckOpensAccordionOneTest.java

   public static Object[][I getTestData() {
   return new Object[11{
   {"Сколько это стоит? И как оплатить?", "Сутки - 400 рублей. Оплата курьеру - наличными
   {"Хочу сразу несколько самокатов! Так можно?", "Пока что у нас так: один заказ - один

   Добавь кейсы для проверки каждого текста ответа на вопрос.

